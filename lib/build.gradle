/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.1/userguide/building_java_projects.html
 */

plugins {
    id 'org.springframework.boot' version '2.7.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'maven-publish'

//    compileOnly(fileTree(dir: 'C:/Users/arthu/.m2/repository/io/github/arthurstrokov/aop-library/0.0.1', include: '*.jar'))
}

java {
    withJavadocJar()
    withSourcesJar()
}

bootJar {
    enabled = false
}

jar {
    enabled = true
}

group = 'io.github.arthurstrokov'
version = '0.0.1'


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

ext {
    springVersion = '5.3.20'
    springBootVersion = '2.7.0'
    aspectjVersion = '1.9.9.1'
}

dependencies {
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor:2.6.7'
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-autoconfigure
    implementation group: 'org.springframework.boot', name: 'spring-boot-autoconfigure', version: springBootVersion
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: springBootVersion

    // https://mvnrepository.com/artifact/org.aspectj/aspectjtools
    implementation group: 'org.aspectj', name: 'aspectjtools', version: aspectjVersion
    // https://mvnrepository.com/artifact/org.aspectj/aspectjweaver
    runtimeOnly group: 'org.aspectj', name: 'aspectjweaver', version: aspectjVersion
    // https://mvnrepository.com/artifact/org.aspectj/aspectjrt
    runtimeOnly group: 'org.aspectj', name: 'aspectjrt', version: aspectjVersion

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.36'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'
    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:30.1.1-jre'

    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13.2'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'io.github.arthurstrokov'
            artifactId = 'aop-library'
            version = '0.0.1'
            from(components["java"])
            pom {
                name = 'AOP Library Project'
                description = 'AOP Library Project'
                packaging = "jar"
                name.set("AOP Library Project")
                url.set("https://github.com/arthurstrokov/aop-library")
                description.set("AOP Library Project")

                licenses {
                    license {
                        name.set("The Apache License, Version 2.0")
                        url.set("https://www.apache.org/licenses/LICENSE-2.0.txt")
                    }
                }

                scm {
                    connection.set("scm:https://github.com/arthurstrokov/aop-library.git")
                    developerConnection.set("scm:git@github.com:arthurstrokov/aop-library.git")
                    url.set("https://github.com/arthurstrokov/aop-library")
                }

                developers {
                    developer {
                        id.set("AViSTATE")
                        name.set("Arthur Strokov")
                        email.set("arthurstrokov@gmail.com")
                    }
                }
            }
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }

    repositories {
        maven {
            name = 'myRepo'
            url = layout.buildDirectory.dir("repo")
        }
    }
}

tasks.named('jar') {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
}
